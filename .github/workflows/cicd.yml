name: CI Pipeline - Build Docker Image Locally

on:
  push:
    branches: [main]

jobs:
  checkout:
    runs-on: self-hosted
    outputs:
      build_tag: ${{ steps.set_tag.outputs.tag }}
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
  
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask flake8

    - name: Lint Python code
      run: flake8 src/app.py

    - name: Run Python app in background
      run: |
        python src/app.py &
        sleep 5
        
    - name: Set BUILD_TAG from timestamp
      id: set_tag
      run: echo "tag=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"
      
  build-image:
    runs-on: self-hosted
    needs: checkout
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build Docker image with timestamp
      run: |
       TAG=${{ needs.checkout.outputs.build_tag }}
       docker build --no-cache -t hello-world-app:$TAG .

    - name: Verify Docker image created
      run: docker images | grep hello-world-app

  save-upload:
    runs-on: self-hosted
    needs: [checkout, build-image]
    
    steps:
    - name: Save Docker image to folder
      run: |
        TAG=${{ needs.checkout.outputs.build_tag }}
        mkdir -p docker-images
        docker save hello-world-app:$TAG -o docker-images/hello-world-app-$TAG.tar

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: hello-world-app-${{ needs.checkout.outputs.build_tag }}
        path: docker-images/hello-world-app-${{ needs.checkout.outputs.build_tag }}.tar
    
  deploy-to-minikube:
    runs-on: self-hosted
    needs: [checkout, save-upload]
    
    steps:
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: hello-world-app-${{ needs.checkout.outputs.build_tag }}
        path: ./docker-images

    - name: Load Docker image into Minikube
      run: |
        eval $(minikube -p minikube docker-env)
        TAG=${{ needs.checkout.outputs.build_tag }}
        docker load -i ./docker-images/hello-world-app-$TAG.tar

    - name: Replace image tag in deployment file
      run: |
        TAG=${{ needs.checkout.outputs.build_tag }}
        if [ ! -f deployment.yaml ]; then
        echo "ERROR: deployment.yaml not found!"
        exit 1
        fi
        grep "image: hello-world-app" deployment.yaml || {
         echo "ERROR: 'image:' line not found or doesn't match"
         exit 1
        }
        sed "s|image: hello-world-app:.*|image: hello-world-app:$TAG|" deployment.yaml


    - name: Debug â€” Show deployment.yaml contents
      run: |
        echo "Generated deployment.yaml:"
        cat deployment.yaml
    
    - name: Apply deployment to Minikube
      run: kubectl apply -f deployment.yaml

    - name: Run kubectl port-forward binding to 0.0.0.0
      run: |
        nohup kubectl port-forward service/hello-world 8080:80 --address 0.0.0.0 > pf.log 2>&1 &
        echo "Port forwarding started in background"
        sleep 60


    - name: Wait and show service info
      run: |
        echo "Waiting for service..."
        sleep 10
        minikube service hello-world --url


    
