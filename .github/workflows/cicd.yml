name: CICD Pipeline       # Giving our workflow a name just for clarity in GitHub Actions UI

# Tell GitHub to run this workflow whenever someone pushes to the main branch
on:
  push:
    branches: [main]
   
jobs:
# First job: do initial stuff like checking out code, linting, and tagging the build
  checkout:
    runs-on: self-hosted                         ## We'll run this on our own self-hosted runner (Here we are using AWS EC2 instance)
    outputs:
    #Save the generated tag so we can use it in other jobs
      build_tag: ${{ steps.set_tag.outputs.tag }}       #It is fetching the output value from step named set_tag, specifically the tag output.
  
    steps:
    # Pull down the latest version of the repository 
    - name: Checkout code
      uses: actions/checkout@v3  # actions/checkout: The name of the Action (hosted at https://github.com/actions/checkout) version 3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4     # Install Python 3.9 so we can run our app and tools
      with:
        python-version: 3.9
  
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip    # upgrades pip (Python’s package installer) to the latest version using Python.
        pip install flask flake8               # Install Python dependencies we need (Flask and flake8).

    - name: Lint Python code             
      run: flake8 src/app.py                  # Run linting (code check) to catch errors and bad formatting

# Try running the app in the background for a few seconds just to see if it starts .

    - name: Run Python app in background
      run: |
        python src/app.py &
        sleep 5
        
  # Create a unique build tag based on the current date and time (YYYYMMDDHHMMSS)      
    - name: Set BUILD_TAG from timestamp
      id: set_tag
      run: echo "tag=$(date +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

  # Second job: build the Docker image    
  build-image:
    runs-on: self-hosted
    needs: checkout               # Wait until the checkout job is done
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v3       # Check out the code in this job again 


# Stop and remove any old containers made from the previous image to avoid conflicts
 #  - name: Clean up old containers using hello-world-app:latest
  #    run: |
    #    docker ps -q --filter "ancestor=hello-world-app:latest" | xargs -r docker stop
     #   docker ps -a -q --filter "ancestor=hello-world-app:latest" | xargs -r docker rm


 # Build a new Docker image with the unique tag, and don't use cache (so it's always fresh)
    - name: Build Docker image with timestamp
      run: |
       TAG=${{ needs.checkout.outputs.build_tag }}
       docker build --no-cache -t hello-world-app:$TAG .

    - name: Verify Docker image created
      run: docker images | grep hello-world-app  # Check if image was actually built successfully by listing it

# Third job: save the image to a file and upload it so we can use it later
  save-upload:
    runs-on: self-hosted
    needs: [checkout, build-image]  # Wait until both previous jobs done

# Save the Docker image into a .tar file (like a zipped version of the image)
    steps:
    - name: Save Docker image to folder
      run: |
        TAG=${{ needs.checkout.outputs.build_tag }}   #Assigns a variable TAG with the value of a build tag output from a previous GitHub Actions step named checkout.
        mkdir -p docker-images
        docker save hello-world-app:$TAG -o docker-images/hello-world-app-$TAG.tar   #It's used to save an image for storage or transfer (e.g., to move to another machine or upload elsewhere)

# Upload the image tarball as an artifact so we can download it in the deploy job
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: hello-world-app-${{ needs.checkout.outputs.build_tag }}
        path: docker-images/hello-world-app-${{ needs.checkout.outputs.build_tag }}.tar


 # Fourth job: deploy application to Minikube using the uploaded Docker image
  deploy-to-minikube:
    runs-on: self-hosted
    needs: [checkout, save-upload]   # Wait for image to be uploaded
    
 # Download the image artifact (that .tar file we uploaded earlier)   
    steps:
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: hello-world-app-${{ needs.checkout.outputs.build_tag }}
        path: ./docker-images

  # Configures shell environment to use the Docker daemon inside Minikube VM instead of your local Docker.
    - name: Load Docker image into Minikube
      run: |
        eval $(minikube -p minikube docker-env)   
        TAG=${{ needs.checkout.outputs.build_tag }}   
        docker load -i ./docker-images/hello-world-app-$TAG.tar  # Loads a Docker image saved in a .tar file back into the Docker daemon.

 # Update the image tag inside our Kubernetes deployment YAML file
    - name: Replace image tag in deployment file
      run: |
        TAG=${{ needs.checkout.outputs.build_tag }}
        if [ ! -f deployment.yaml ]; then   # If deployment file is not present print error message and exit .
        echo "ERROR: deployment.yaml not found!"
        exit 1
        fi
        grep "image: hello-world-app" deployment.yaml || {
         echo "ERROR: 'image:' line not found or doesn't match"
         exit 1
        }
        sed -i "s|image: hello-world-app:.*|image: hello-world-app:$TAG|" deployment.yaml
# Above command updates the Docker image tag in Kubernetes deployment file to use the current build tag stored in $TAG. 
# to ensures deployment points to the correct image version.

# Show the contents of the updated YAML file (handy for debugging)
    - name: Debug — Show deployment.yaml contents
      run: |
        echo "Generated deployment.yaml:"
        cat deployment.yaml

# Actually apply the deployment to the Kubernetes cluster inside Minikube
    - name: Apply deployment to Minikube
      run: kubectl apply -f deployment.yaml

# Will check the deployment status 
    - name: Check Kubernetes Deployment Status
      run: |
        echo "Fetching all Kubernetes resources..."
        sleep 30 && kubectl get pods && kubectl get svc && kubectl get deployments -n default
      
   
 #Expose the app using port-forwarding so we can access it on http://ec2-ip-address:8080
    - name: Run kubectl port-forward binding to 0.0.0.0
      run: |
        nohup kubectl port-forward service/hello-world 8080:80 --address 0.0.0.0 > pf.log 2>&1 &
        echo "Port forwarding started in background"
        sleep 60

## Wait a little and then print the URL where the app is available
#    - name: Wait and show service info
#      run: |
#        echo "Waiting for service..."
#        sleep 10
#        minikube service hello-world --url

